apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        applicationId "com.littlecorgi.photoxiu"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
    }
    signingConfigs {
        config {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties.containsKey("KEYSTORE_PASS") ? keystoreProperties['KEYSTORE_PASS'] : System.getenv("KEYSTORE_PASS")
            keyAlias keystoreProperties.containsKey("ALIAS_NAME") ? keystoreProperties['ALIAS_NAME'] : System.getenv("ALIAS_NAME")
            keyPassword keystoreProperties.containsKey("ALIAS_PASS") ? keystoreProperties['ALIAS_PASS'] : System.getenv("ALIAS_PASS")
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
        }
    }
    buildToolsVersion = android.buildToolsVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        dataBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly rootProject.ext.dependencies["javaxAnnotation"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["test:runner"]

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    // 用于实现RecyclerView的一次滑动一个item
    implementation 'com.yc:PagerLib:1.0.1'
    implementation 'cn.jzvd:jiaozivideoplayer:7.4.2'

    // https://github.com/alibaba/ARouter/issues/277#issuecomment-384214181
    kapt rootProject.ext.dependencies["arouter-compiler"]

    implementation project(':commonlib')
    if (!isRunAlone.toBoolean()) {
        implementation project(':camera')
        implementation project(':puzzle')
        implementation project(':retouch')
    }

    // 穿山甲SDK
    implementation(name: 'open_ad_sdk', ext: 'aar')
}
